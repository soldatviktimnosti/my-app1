name: CD Pipeline

on:
  push:
    branches: [ main ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
    
    - name: Install test tools
      run: npm install --save-dev jest supertest 

    - name: Run tests
      run: npx jest --passWithNoTests

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container  # ← явно указываем драйвер

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Deploy to K3s
      run: |
        chmod 400 ${{ secrets.SSH_PRIVATE_KEY }}
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} \
          ${{ secrets.SSH_USER }}@${{ secrets.K3S_SERVER }} '
          # Update Kubernetes manifests
          cd /opt/k8s/my-node-app
          
          # Update image tag in deployment
          sed -i "s|image:.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}|" kustomization.yaml
          
          # Apply changes
          kubectl apply -k . --namespace=default
          
          # Wait for rollout to complete
          kubectl rollout status deployment/my-node-app --namespace=default --timeout=300s
        '

  health-check:
    runs-on: ubuntu-latest
    needs: build-and-deploy
    if: always()
    
    steps:
    - name: Wait for application to be ready
      run: |
        chmod 400 ${{ secrets.SSH_PRIVATE_KEY }}
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} \
          ${{ secrets.SSH_USER }}@${{ secrets.K3S_SERVER }} '
          # Get service IP and port
          APP_URL=$(kubectl get service my-node-app-service --namespace=default -o jsonpath="{.status.loadBalancer.ingress[0].ip}:{.spec.ports[0].port}")
          
          # Health check with retries
          for i in {1..30}; do
            if curl -f http://$APP_URL/health; then
              echo "✅ Application is healthy"
              exit 0
            fi
            echo "⏳ Waiting for application to be ready... Attempt $i"
            sleep 10
          done
          echo "❌ Application health check failed"
          exit 1
        '

    - name: Run smoke tests
      run: |
        chmod 400 ${{ secrets.SSH_PRIVATE_KEY }}
        ssh -o StrictHostKeyChecking=no -i ${{ secrets.SSH_PRIVATE_KEY }} \
          ${{ secrets.SSH_USER }}@${{ secrets.K3S_SERVER }} '
          APP_URL=$(kubectl get service my-node-app-service --namespace=default -o jsonpath="{.status.loadBalancer.ingress[0].ip}:{.spec.ports[0].port}")
          
          # Test main endpoints
          curl -f http://$APP_URL/
          curl -f http://$APP_URL/health
          curl -f http://$APP_URL/api/info
          curl -f http://$APP_URL/ready
        '