name: CD Pipeline

on:
  push:
    branches: [ main ]
  release:
    types: [published]

permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on:  ubuntu-latest 
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
    
    - name: Install test tools
      run: npm install --save-dev jest supertest 

    - name: Run tests
      run: npx jest --passWithNoTests

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}  
        password: ${{ secrets.GHCR_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container  

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}  # ‚Üê –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º registry
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        no-cache-filters: true
    
    - name: Debug build output
      run: |
        echo "üîç Debugging build results..."
        docker images | grep "${{ github.repository }}" || echo "‚ùå Image not found locally"
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º –∫–∞–∫–∏–µ —Ç–µ–≥–∏ –µ—Å—Ç—å –ª–æ–∫–∞–ª—å–Ω–æ
        echo "Local images:"
        docker images --format "table {{.Repository}}\t{{.Tag}}\t{{.ID}}"
    
    - name: Debug SSH connection
      run: |
        echo "SSH_USER: ${{ secrets.SSH_USER }}"
        echo "K3S_SERVER: ${{ secrets.K3S_SERVER }}"
        echo "SSH_KEY length: ${#SSH_KEY}"  # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Verify image was pushed
      run: |
        echo "üîç Verifying image can be pulled from GHCR..."
        
        # –ü—Ä–æ–±—É–µ–º —Å–∫–∞—á–∞—Ç—å –æ–±—Ä–∞–∑ –æ–±—Ä–∞—Ç–Ω–æ
        if docker pull ghcr.io/${{ github.repository }}:latest; then
          echo "‚úÖ SUCCESS: Image exists in GHCR and can be pulled!"
          echo "Image: ghcr.io/${{ github.repository }}:latest"
          docker images | grep "${{ github.repository }}"
        else
          echo "‚ùå FAILED: Cannot pull image from GHCR"
          exit 1
        fi
      
  pre-deploy:
    runs-on: self-hosted
    needs: build

    steps:
    
    - name: Deploy with diagnostics
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞ –≤ K3s
        echo "=== Checking image availability in K3s ==="
        kubectl run test-pod --image=ghcr.io/${{ github.repository }}:latest --restart=Never --command -- sleep 3600 || echo "Image pull failed"
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∞
        sleep 10
        kubectl get pods -l run=test-pod -o wide
        kubectl describe pod -l run=test-pod
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –ø–æ–¥ —É–ø–∞–ª
        kubectl logs -l run=test-pod --tail=20 2>/dev/null || echo "No logs available"
        kubectl delete pod test-pod 2>/dev/null || true

    
  deploy:
    runs-on: self-hosted
    needs: pre-deploy
      
    steps:
    - name: Cleanup previous deployment
      run: |
        echo "üßπ Cleaning up previous deployment..."
        kubectl delete deployment my-node-app 2>/dev/null || echo "No deployment to delete"
        kubectl delete service my-node-app-service 2>/dev/null || echo "No service to delete"
        kubectl delete secret ghcr-secret 2>/dev/null || echo "No secret to delete"
        sleep 5

    - name: Setup GHCR access
      run: |
        echo "üîë Setting up GHCR access..."
        # –°–æ–∑–¥–∞–µ–º pull secret –¥–ª—è GitHub Container Registry
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GITHUB_TOKEN }} \
          --namespace=default

        # –î–æ–±–∞–≤–ª—è–µ–º secret –∫ default service account (—Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –≤—Å–µ—Ö –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç–æ–≤)
        kubectl patch serviceaccount default -p '{"imagePullSecrets": [{"name": "ghcr-secret"}]}'
        
        echo "‚úÖ GHCR access configured"

    - name: Create deployment
      run: |
        echo "üöÄ Creating deployment..."
        kubectl create deployment my-node-app --image=ghcr.io/${{ github.repository }}:latest
        echo "‚úÖ Deployment created"

    - name: Create service
      run: |
        echo "üîó Creating service..."
        kubectl expose deployment my-node-app --port=3000 --target-port=3000 --type=LoadBalancer --name=my-node-app-service
        echo "‚úÖ Service exposed"

    - name: Verify GHCR secret
      run: |
        echo "üîç Checking GHCR secret..."
        kubectl get secret ghcr-secret -o yaml | grep -A 3 -B 3 "dockerconfigjson"
        
        # –ü—Ä–æ–≤–µ—Ä–∏–º —á—Ç–æ secret —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        kubectl get secret ghcr-secret -o jsonpath='{.data.\.dockerconfigjson}' | base64 -d | jq .
    
    - name: Debug pod status
      run: |
        echo "üîç Debugging pod status..."
        
        # –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥ –∏ —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç
        for i in {1..12}; do
          echo "=== Check $i ==="
          echo "--- Pods ---"
          kubectl get pods -l app=my-node-app -o wide
          
          echo "--- Pod details ---"
          kubectl describe pods -l app=my-node-app | grep -A 10 -B 5 "Status:\\|State:\\|Reason:\\|Message:\\|Error"
          
          echo "--- Pod logs ---"
          kubectl logs -l app=my-node-app --tail=20 2>/dev/null || echo "No logs available yet"
          
          echo "--- Events ---"
          kubectl get events --field-selector involvedObject.name=$(kubectl get pods -l app=my-node-app -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "none") --sort-by=.lastTimestamp 2>/dev/null || echo "No events"
          
          sleep 5
        done

    - name: Wait for rollout
      run: |
        echo "‚è≥ Waiting for rollout to complete..."
        kubectl rollout status deployment/my-node-app --timeout=300s
        echo "‚úÖ Rollout completed successfully"

    - name: Verify deployment
      run: |
        echo "üîç Verifying deployment..."
        echo "=== Deployment status ==="
        kubectl get deployment my-node-app
        
        echo "=== Pod status ==="
        kubectl get pods -l app=my-node-app
        
        echo "=== Service status ==="
        kubectl get service my-node-app-service
        
        echo "üéâ Deployment successful!"

  health-check:
    runs-on: self-hosted
    needs: deploy
    if: always()
  
    steps:


    - name: Get application URL
      id: url
      run: |
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–∏—Ç IP
        for i in {1..20}; do
          APP_IP=$(kubectl get service my-node-app-service -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null)
          if [ -n "$APP_IP" ]; then
            APP_PORT=$(kubectl get service my-node-app-service -o jsonpath="{.spec.ports[0].port}")
            echo "APP_URL=http://${APP_IP}:${APP_PORT}" >> $GITHUB_OUTPUT
            echo "‚úÖ Service IP: $APP_IP, Port: $APP_PORT"
            exit 0
          fi
          echo "‚è≥ Waiting for service to get IP... Attempt $i"
          sleep 5
        done
        echo "‚ùå Service did not get IP address"
        exit 1

    - name: Wait for application to be ready
      run: |
        for i in {1..30}; do
          if curl -f -s "${{ steps.url.outputs.APP_URL }}/health" > /dev/null 2>&1; then
            echo "‚úÖ Application is healthy"
            exit 0
          fi
          echo "‚è≥ Waiting for application to be ready... Attempt $i"
          sleep 10
        done
        echo "‚ùå Application health check failed"
        exit 1

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against: ${{ steps.url.outputs.APP_URL }}"
        
        endpoints=("/" "/health" "/api/info" "/ready")
        for endpoint in "${endpoints[@]}"; do
          if curl -f -s "${{ steps.url.outputs.APP_URL }}${endpoint}" > /dev/null 2>&1; then
            echo "‚úÖ $endpoint - OK"
          else
            echo "‚ö†Ô∏è  $endpoint - Failed"
          fi
        done