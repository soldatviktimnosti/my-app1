name: CD Pipeline

on:
  push:
    branches: [ main ]
  release:
    types: [published]

permissions:
  contents: read
  packages: write
  actions: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on:  ubuntu-latest 
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
    
    - name: Install test tools
      run: npm install --save-dev jest supertest 

    - name: Run tests
      run: npx jest --passWithNoTests

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}  
        password: ${{ secrets.GHCR_TOKEN }}
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container  

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ghcr.io/${{ github.repository }}  # ‚Üê –Ø–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ–º registry
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-
    

    - name: Build and push Docker image with debug
      run: |
          echo "üê≥ STARTING DOCKER BUILD AND PUSH DEBUG..."
          
          # 1. –õ–æ–≥–∏–Ω –≤ GHCR
          echo "üîê Step 1: Logging into GHCR..."
          echo "${{ secrets.GHCR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          
          # 2. –°–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–∞
          echo "üî® Step 2: Building image..."
          docker build -t ghcr.io/${{ github.repository }}:latest .
          
          # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–±—Ä–∞–∑–∞
          echo "üìã Step 3: Verifying local image..."
          docker images | grep "${{ github.repository }}" || echo "‚ùå Image not found locally"
          
          # 4. Push —Å –ø–æ–¥—Ä–æ–±–Ω—ã–º –≤—ã–≤–æ–¥–æ–º
          echo "üöÄ Step 4: Pushing to GHCR..."
          docker push ghcr.io/${{ github.repository }}:latest
          
          # 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è push
          PUSH_EXIT_CODE=$?
          if [ $PUSH_EXIT_CODE -eq 0 ]; then
            echo "‚úÖ Step 4: Push command completed successfully"
          else
            echo "‚ùå Step 4: Push command failed with exit code: $PUSH_EXIT_CODE"
            exit 1
          fi
          
          # 6. –ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ pull
          echo "üîç Step 5: Immediate verification via pull..."
          if docker pull ghcr.io/${{ github.repository }}:latest; then
            echo "üéâ SUCCESS: Image successfully pushed and verified in GHCR!"
            echo "Image: ghcr.io/${{ github.repository }}:latest"
          else
            echo "üí• CRITICAL: Image pushed but cannot be pulled - check GHCR"
            exit 1
          fi
    
    - name: Debug SSH connection
      run: |
        echo "SSH_USER: ${{ secrets.SSH_USER }}"
        echo "K3S_SERVER: ${{ secrets.K3S_SERVER }}"
        echo "SSH_KEY length: ${#SSH_KEY}"  # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      
  pre-deploy:
    runs-on: self-hosted
    needs: build

    steps:
    
    - name: Deploy with diagnostics
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞ –≤ K3s
        echo "=== Checking image availability in K3s ==="
        kubectl run test-pod --image=ghcr.io/${{ github.repository }}:latest --restart=Never --command -- sleep 3600 || echo "Image pull failed"
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∞
        sleep 10
        kubectl get pods -l run=test-pod -o wide
        kubectl describe pod -l run=test-pod
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –ø–æ–¥ —É–ø–∞–ª
        kubectl logs -l run=test-pod --tail=20 2>/dev/null || echo "No logs available"
        kubectl delete pod test-pod 2>/dev/null || true

    - name: Verify token is valid
      run: |
        echo "üîê Testing token validity..."
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ jq
        echo "üì¶ Installing jq..."
        sudo apt-get update && sudo apt-get install -y jq
        
        response=$(curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
          "https://api.github.com/user")
        
        if echo "$response" | grep -q "login"; then
          username=$(echo "$response" | jq -r '.login')
          echo "‚úÖ Token valid - user: $username"
        else
          echo "‚ùå Token invalid: $response"
          exit 1
        fi
    
    - name: Check package visibility
      run: |
        echo "üëÄ Checking package visibility..."
        # –ï—Å–ª–∏ –ø–∞–∫–µ—Ç –ø—Ä–∏–≤–∞—Ç–Ω—ã–π, –º–æ–≥—É—Ç –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
          "https://api.github.com/user/packages/container/${{ github.repository }}" | jq .

    - name: Final GHCR access test without docker
      run: |
        echo "üîç FINAL GHCR ACCESS TEST (NO DOCKER)"
        echo "===================================="
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∏–º —á–µ—Ä–µ–∑ curl —Å —Ä–∞–∑–Ω—ã–º–∏ header'–∞–º–∏
        echo "1. Testing different API endpoints:"
        
        echo -e "\n1.1 Direct manifest request:"
        curl -s -o /dev/null -w "Status: %{http_code}\n" \
          -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
          -H "Accept: application/vnd.docker.distribution.manifest.v2+json" \
          "https://ghcr.io/v2/${{ github.repository }}/manifests/latest"
        
        echo -e "\n1.2 Tags list:"
        curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
          "https://ghcr.io/v2/${{ github.repository }}/tags/list"
        
        echo -e "\n1.3 Catalog:"
        curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
          "https://ghcr.io/v2/_catalog"
        
        # 2. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ GitHub API
        echo -e "\n2. GitHub Packages API:"
        curl -s -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
          -H "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/user/packages?package_type=container"
        
        # 3. –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏
        echo -e "\n3. Simple availability check:"
        if curl -s -I -H "Authorization: Bearer ${{ secrets.GHCR_TOKEN }}" \
          "https://ghcr.io/v2/${{ github.repository }}/manifests/latest" | grep -q "200"; then
          echo "‚úÖ Image is accessible via GHCR API"
        else
          echo "‚ùå Image is NOT accessible via GHCR API"
        fi

    
    
  deploy:
    runs-on: self-hosted
    needs: pre-deploy
      
    steps:
    - name: Cleanup previous deployment
      run: |
        echo "üßπ Cleaning up previous deployment..."
        kubectl delete deployment my-node-app 2>/dev/null || echo "No deployment to delete"
        kubectl delete service my-node-app-service 2>/dev/null || echo "No service to delete"
        kubectl delete secret ghcr-secret 2>/dev/null || echo "No secret to delete"
        sleep 5

    - name: Setup GHCR access with proper token
      run: |
        echo "üîë Setting up GHCR access..."
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º GHCR_TOKEN –≤–º–µ—Å—Ç–æ GITHUB_TOKEN
        kubectl create secret docker-registry ghcr-secret \
          --docker-server=ghcr.io \
          --docker-username=${{ github.actor }} \
          --docker-password=${{ secrets.GHCR_TOKEN }} \
          --namespace=default
        echo "‚úÖ GHCR secret created"

    - name: Create deployment with explicit imagePullSecrets and ports
      run: |
        echo "üöÄ Creating deployment..."
        # –°–æ–∑–¥–∞–µ–º deployment —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –ø–æ—Ä—Ç–∞ 8080
        kubectl create deployment my-node-app --image=ghcr.io/${{ github.repository }}:latest
        
        # –î–æ–±–∞–≤–ª—è–µ–º imagePullSecrets
        kubectl patch deployment my-node-app -p '{
          "spec": {
            "template": {
              "spec": {
                "imagePullSecrets": [{"name": "ghcr-secret"}]
              }
            }
          }
        }'
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–æ—Ä—Ç–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
        kubectl patch deployment my-node-app --type='json' -p='[{
          "op": "add",
          "path": "/spec/template/spec/containers/0/ports",
          "value": [
            {
              "containerPort": 8080,
              "protocol": "TCP"
            }
          ]
        }]'
        echo "‚úÖ Deployment created with port 8080"

    - name: Create service
      run: |
        echo "üîó Creating service..."
        kubectl expose deployment my-node-app --port=3000 --target-port=3000 --type=LoadBalancer --name=my-node-app-service
        echo "‚úÖ Service exposed"

    - name: Quick status check
      run: |
        echo "üîç Quick status check..."
        kubectl get deployment,svc,pods -l app=my-node-app

    - name: Wait for rollout with better debugging
      run: |
        echo "‚è≥ Waiting for rollout to complete..."
        
        # –ú–æ–Ω–∏—Ç–æ—Ä–∏–º —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞–º–∏
        for i in {1..30}; do
          echo "Check $i/30:"
          POD_NAME=$(kubectl get pods -l app=my-node-app -o jsonpath='{.items[0].metadata.name}' 2>/dev/null || echo "none")
          
          if [ "$POD_NAME" != "none" ]; then
            echo "Pod: $POD_NAME"
            kubectl get pod $POD_NAME -o wide
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
            STATUS=$(kubectl get pod $POD_NAME -o jsonpath='{.status.phase}')
            echo "Status: $STATUS"
            
            if [ "$STATUS" = "Running" ]; then
              echo "‚úÖ Pod is running!"
              break
            fi
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏—á–∏–Ω—ã –µ—Å–ª–∏ –Ω–µ Running
            if [ "$STATUS" = "Pending" ] || [ "$STATUS" = "Failed" ]; then
              echo "--- Pod details ---"
              kubectl describe pod $POD_NAME | grep -A 5 "Events:"
            fi
          fi
          
          sleep 5
        done
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ rollout
        kubectl rollout status deployment/my-node-app --timeout=60s
        echo "‚úÖ Rollout completed"

    - name: Test application connectivity
      run: |
        echo "üîç Testing application on port 8080..."
        
        for i in {1..10}; do
          # Port-forward –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–∞ –ø–æ—Ä—Ç—É 8080
          kubectl port-forward svc/my-node-app-service 8080:8080 --address=0.0.0.0 > /dev/null 2>/dev/null &
          PF_PID=$!
          
          sleep 3
          
          if curl -s --connect-timeout 5 "http://localhost:8080/" > /dev/null 2>&1; then
            kill $PF_PID 2>/dev/null
            echo "‚úÖ Application is responding on port 8080"
            exit 0
          fi
          
          kill $PF_PID 2>/dev/null
          echo "‚è≥ Testing connectivity... Attempt $i"
          sleep 5
        done
        
        echo "‚ö†Ô∏è Application not responding via port-forward (might be normal if no root endpoint)"
    - name: Final verification
      run: |
        echo "üîç Final verification..."
        echo "=== Current status ==="
        kubectl get deployment,svc,pods -l app=my-node-app
        
        echo "=== Service details ==="
        kubectl describe service my-node-app-service | grep -E "Port|TargetPort|NodePort"
        
        echo "=== Pod details ==="
        kubectl describe pod -l app=my-node-app | grep -A 10 "Containers:" | grep -E "Image|Port|Ready"
        
        echo "=== Logs from current running pod ==="
        kubectl logs -l app=my-node-app --selector=status.phase=Running --tail=10 2>/dev/null || echo "No logs available"
        
        echo "üéâ SUCCESS! Deployment completed."
        echo "üì° Service available at: http://10.0.2.15:8080"
        echo "üåê Or via NodePort: http://10.0.2.15:$(kubectl get service my-node-app-service -o jsonpath='{.spec.ports[0].nodePort}')"

  health-check:
    runs-on: self-hosted
    needs: deploy
    if: always()
  
    steps:


    - name: Get application URL
      id: url
      run: |
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–∏—Ç IP
        for i in {1..20}; do
          APP_IP=$(kubectl get service my-node-app-service -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null)
          if [ -n "$APP_IP" ]; then
            APP_PORT=$(kubectl get service my-node-app-service -o jsonpath="{.spec.ports[0].port}")
            echo "APP_URL=http://${APP_IP}:${APP_PORT}" >> $GITHUB_OUTPUT
            echo "‚úÖ Service IP: $APP_IP, Port: $APP_PORT"
            exit 0
          fi
          echo "‚è≥ Waiting for service to get IP... Attempt $i"
          sleep 5
        done
        echo "‚ùå Service did not get IP address"
        exit 1

    - name: Wait for application to be ready
      run: |
        echo "üîç Testing application on port 8080..."
        
        for i in {1..30}; do
          # Port-forward –∫ —Å–µ—Ä–≤–∏—Å—É –Ω–∞ –ø–æ—Ä—Ç—É 8080
          kubectl port-forward svc/my-node-app-service 8080:8080 --address=0.0.0.0 > /dev/null 2>&1 &
          PF_PID=$!
          
          sleep 3
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –Ω–∞ –ø–æ—Ä—Ç—É 8080
          if curl -s --connect-timeout 5 "http://localhost:8080/" > /dev/null 2>&1; then
            kill $PF_PID 2>/dev/null
            echo "‚úÖ Application is ready and responding on port 8080"
            exit 0
          fi
          
          kill $PF_PID 2>/dev/null
          echo "‚è≥ Waiting for application to be ready... Attempt $i"
          sleep 10
        done
        
        echo "‚ùå Application is not ready after 30 attempts"
        exit 1

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against: ${{ steps.url.outputs.APP_URL }}"
        
        endpoints=("/" "/health" "/api/info" "/ready")
        for endpoint in "${endpoints[@]}"; do
          if curl -f -s "${{ steps.url.outputs.APP_URL }}${endpoint}" > /dev/null 2>&1; then
            echo "‚úÖ $endpoint - OK"
          else
            echo "‚ö†Ô∏è  $endpoint - Failed"
          fi
        done