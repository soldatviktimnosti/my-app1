name: CD Pipeline

on:
  push:
    branches: [ main ]
  release:
    types: [published]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    runs-on:  ubuntu-latest 
    if: github.event_name == 'push' || github.event_name == 'release'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
    
    - name: Install test tools
      run: npm install --save-dev jest supertest 

    - name: Run tests
      run: npx jest --passWithNoTests

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}  #–≥–æ–ª
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix={{branch}}-

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        driver: docker-container  

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}  
        password: ${{ secrets.GHCR_TOKEN }}    

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Debug SSH connection
      run: |
        echo "SSH_USER: ${{ secrets.SSH_USER }}"
        echo "K3S_SERVER: ${{ secrets.K3S_SERVER }}"
        echo "SSH_KEY length: ${#SSH_KEY}"  # –ü—Ä–æ–≤–µ—Ä–∏–º –¥–ª–∏–Ω—É –∫–ª—é—á–∞
      env:
        SSH_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
  
  pre-deploy:
    runs-on: self-hosted
    needs: build

    steps:
    
    - name: Deploy with diagnostics
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –æ–±—Ä–∞–∑–∞ –≤ K3s
        echo "=== Checking image availability in K3s ==="
        kubectl run test-pod --image=ghcr.io/${{ github.repository }}:latest --restart=Never --command -- sleep 3600 || echo "Image pull failed"
        
        # –ñ–¥–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∞
        sleep 10
        kubectl get pods -l run=test-pod -o wide
        kubectl describe pod -l run=test-pod
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–æ–≥–∏ –µ—Å–ª–∏ –ø–æ–¥ —É–ø–∞–ª
        kubectl logs -l run=test-pod --tail=20 2>/dev/null || echo "No logs available"
        kubectl delete pod test-pod 2>/dev/null || true

    - name: Deploy with detailed debugging
      run: |
        # –°–æ–∑–¥–∞–µ–º –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç
        kubectl create deployment my-node-app --image=ghcr.io/${{ github.repository }}:latest
        
        # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        sleep 30
        
        # –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞
        echo "=== Deployment status ==="
        kubectl get deployment my-node-app
        
        echo "=== Pod status ==="
        kubectl get pods -l app=my-node-app
        
        echo "=== Pod details ==="
        kubectl describe pods -l app=my-node-app
        
        echo "=== Pod logs ==="
        kubectl logs -l app=my-node-app --tail=50 || echo "No logs available yet"
        
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Ä–≤–∏—Å
        kubectl expose deployment my-node-app --port=3000 --target-port=3000 --type=LoadBalancer --name=my-node-app-service
    
  deploy:
    runs-on: self-hosted
    needs: pre-deploy
  
    steps:

    - name: Deploy using kubectl commands only
      run: |
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–µ–ø–ª–æ–π–º–µ–Ω—Ç
        if kubectl get deployment my-node-app > /dev/null 2>&1; then
          echo "‚úÖ Deployment exists, updating image..."
          kubectl set image deployment/my-node-app my-node-app=ghcr.io/${{ github.repository }}:latest
        else
          echo "üÜï Creating new deployment..."
          kubectl create deployment my-node-app --image=ghcr.io/${{ github.repository }}:latest
        fi
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å–µ—Ä–≤–∏—Å
        if ! kubectl get service my-node-app-service > /dev/null 2>&1; then
          echo "üÜï Creating service..."
          kubectl expose deployment my-node-app --port=3000 --target-port=3000 --type=LoadBalancer --name=my-node-app-service
        fi
        
        kubectl rollout status deployment/my-node-app --timeout=300s
        

  health-check:
    runs-on: self-hosted
    needs: deploy
    if: always()
  
    steps:


    - name: Get application URL
      id: url
      run: |
        # –ñ–¥–µ–º –ø–æ–∫–∞ —Å–µ—Ä–≤–∏—Å –ø–æ–ª—É—á–∏—Ç IP
        for i in {1..20}; do
          APP_IP=$(kubectl get service my-node-app-service -o jsonpath="{.status.loadBalancer.ingress[0].ip}" 2>/dev/null)
          if [ -n "$APP_IP" ]; then
            APP_PORT=$(kubectl get service my-node-app-service -o jsonpath="{.spec.ports[0].port}")
            echo "APP_URL=http://${APP_IP}:${APP_PORT}" >> $GITHUB_OUTPUT
            echo "‚úÖ Service IP: $APP_IP, Port: $APP_PORT"
            exit 0
          fi
          echo "‚è≥ Waiting for service to get IP... Attempt $i"
          sleep 5
        done
        echo "‚ùå Service did not get IP address"
        exit 1

    - name: Wait for application to be ready
      run: |
        for i in {1..30}; do
          if curl -f -s "${{ steps.url.outputs.APP_URL }}/health" > /dev/null 2>&1; then
            echo "‚úÖ Application is healthy"
            exit 0
          fi
          echo "‚è≥ Waiting for application to be ready... Attempt $i"
          sleep 10
        done
        echo "‚ùå Application health check failed"
        exit 1

    - name: Run smoke tests
      run: |
        echo "Running smoke tests against: ${{ steps.url.outputs.APP_URL }}"
        
        endpoints=("/" "/health" "/api/info" "/ready")
        for endpoint in "${endpoints[@]}"; do
          if curl -f -s "${{ steps.url.outputs.APP_URL }}${endpoint}" > /dev/null 2>&1; then
            echo "‚úÖ $endpoint - OK"
          else
            echo "‚ö†Ô∏è  $endpoint - Failed"
          fi
        done